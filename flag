{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMq/gJZC6SFggzyfY8a1Aa3",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Kesharwani-123/Ai-in-personalised-learning-with-small-nudges/blob/main/flag\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install opencv-python-headless pillow numpy scikit-image cairosvg\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k727EJbATzLx",
        "outputId": "f70318e2-1217-42ae-c5c9-3af483b28024"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: opencv-python-headless in /usr/local/lib/python3.11/dist-packages (4.12.0.88)\n",
            "Requirement already satisfied: pillow in /usr/local/lib/python3.11/dist-packages (11.3.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (2.0.2)\n",
            "Requirement already satisfied: scikit-image in /usr/local/lib/python3.11/dist-packages (0.25.2)\n",
            "Collecting cairosvg\n",
            "  Downloading cairosvg-2.8.2-py3-none-any.whl.metadata (2.7 kB)\n",
            "Requirement already satisfied: scipy>=1.11.4 in /usr/local/lib/python3.11/dist-packages (from scikit-image) (1.16.1)\n",
            "Requirement already satisfied: networkx>=3.0 in /usr/local/lib/python3.11/dist-packages (from scikit-image) (3.5)\n",
            "Requirement already satisfied: imageio!=2.35.0,>=2.33 in /usr/local/lib/python3.11/dist-packages (from scikit-image) (2.37.0)\n",
            "Requirement already satisfied: tifffile>=2022.8.12 in /usr/local/lib/python3.11/dist-packages (from scikit-image) (2025.6.11)\n",
            "Requirement already satisfied: packaging>=21 in /usr/local/lib/python3.11/dist-packages (from scikit-image) (25.0)\n",
            "Requirement already satisfied: lazy-loader>=0.4 in /usr/local/lib/python3.11/dist-packages (from scikit-image) (0.4)\n",
            "Collecting cairocffi (from cairosvg)\n",
            "  Downloading cairocffi-1.7.1-py3-none-any.whl.metadata (3.3 kB)\n",
            "Collecting cssselect2 (from cairosvg)\n",
            "  Downloading cssselect2-0.8.0-py3-none-any.whl.metadata (2.9 kB)\n",
            "Requirement already satisfied: defusedxml in /usr/local/lib/python3.11/dist-packages (from cairosvg) (0.7.1)\n",
            "Requirement already satisfied: tinycss2 in /usr/local/lib/python3.11/dist-packages (from cairosvg) (1.4.0)\n",
            "Requirement already satisfied: cffi>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from cairocffi->cairosvg) (1.17.1)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.11/dist-packages (from cssselect2->cairosvg) (0.5.1)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.11/dist-packages (from cffi>=1.1.0->cairocffi->cairosvg) (2.22)\n",
            "Downloading cairosvg-2.8.2-py3-none-any.whl (45 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m45.8/45.8 kB\u001b[0m \u001b[31m1.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading cairocffi-1.7.1-py3-none-any.whl (75 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m75.6/75.6 kB\u001b[0m \u001b[31m2.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading cssselect2-0.8.0-py3-none-any.whl (15 kB)\n",
            "Installing collected packages: cssselect2, cairocffi, cairosvg\n",
            "Successfully installed cairocffi-1.7.1 cairosvg-2.8.2 cssselect2-0.8.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 1) Install dependencies\n",
        "!pip install -q opencv-python-headless pillow numpy scikit-image cairosvg\n",
        "\n",
        "# 2) ---- FULL VALIDATOR FUNCTION ----\n",
        "import io, os, json, math, urllib.request\n",
        "import numpy as np\n",
        "from PIL import Image, ImageDraw\n",
        "import cv2\n",
        "from skimage.morphology import binary_opening, binary_closing, disk\n",
        "from skimage.measure import label, regionprops\n",
        "\n",
        "# Constants\n",
        "RGB_SAFFRON = np.array([0xFF, 0x99, 0x33], dtype=np.float32)\n",
        "RGB_WHITE   = np.array([0xFF, 0xFF, 0xFF], dtype=np.float32)\n",
        "RGB_GREEN   = np.array([0x13, 0x88, 0x08], dtype=np.float32)\n",
        "RGB_NAVY    = np.array([0x00, 0x00, 0x80], dtype=np.float32)\n",
        "CHANNEL_TOL = 0.05 * 255.0\n",
        "TARGET_AR = 3/2\n",
        "AR_TOL = 0.01\n",
        "STRIPE_PROP_TOL_FRAC = 0.005\n",
        "CHAKRA_DIAM_FRAC = 0.75\n",
        "CHAKRA_DIAM_TOL = 0.02\n",
        "CENTER_TOL_FRACTION_OF_WHITE = 0.01\n",
        "EDGE_LOW, EDGE_HIGH = 50, 150\n",
        "HOUGH_THRESH = 40\n",
        "MIN_LINE_LEN_FRAC = 0.15\n",
        "MAX_LINE_GAP_FRAC = 0.05\n",
        "ANGLE_CLUSTER_DEG = 3.0\n",
        "\n",
        "try:\n",
        "    import cairosvg\n",
        "    _HAS_CAIROSVG = True\n",
        "except:\n",
        "    _HAS_CAIROSVG = False\n",
        "\n",
        "def _read_image_any(path_or_url):\n",
        "    src = path_or_url.strip()\n",
        "    is_url = src.startswith(\"http://\") or src.startswith(\"https://\")\n",
        "    if is_url:\n",
        "        with urllib.request.urlopen(src) as r:\n",
        "            data = r.read()\n",
        "    else:\n",
        "        with open(src, \"rb\") as f:\n",
        "            data = f.read()\n",
        "    ext = os.path.splitext(src)[1].lower()\n",
        "    is_svg_hint = ext == \".svg\" or b\"<svg\" in data[:200].lower()\n",
        "    if is_svg_hint:\n",
        "        if not _HAS_CAIROSVG:\n",
        "            raise RuntimeError(\"SVG provided but cairosvg not available\")\n",
        "        png_bytes = cairosvg.svg2png(bytestring=data, dpi=192)\n",
        "        img = Image.open(io.BytesIO(png_bytes)).convert(\"RGB\")\n",
        "    else:\n",
        "        img = Image.open(io.BytesIO(data)).convert(\"RGB\")\n",
        "    return cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)\n",
        "\n",
        "def _rgb_distance(a, b):\n",
        "    return np.abs(a.astype(np.float32) - b.astype(np.float32))\n",
        "\n",
        "def _within_channel_tol(rgb, target, tol=CHANNEL_TOL):\n",
        "    return np.all(_rgb_distance(rgb, target) <= tol)\n",
        "\n",
        "def _dominant_row_colors(bgr):\n",
        "    rgb = cv2.cvtColor(bgr, cv2.COLOR_BGR2RGB).astype(np.float32)\n",
        "    return rgb.mean(axis=1)\n",
        "\n",
        "def _find_stripe_boundaries(bgr):\n",
        "    rows_rgb = _dominant_row_colors(bgr)\n",
        "    diffs = np.linalg.norm(np.diff(rows_rgb, axis=0), axis=1)\n",
        "    H = rows_rgb.shape[0]\n",
        "    min_sep = max(3, int(0.05 * H))\n",
        "    peaks, diffs_copy = [], diffs.copy()\n",
        "    for _ in range(2):\n",
        "        idx = int(np.argmax(diffs_copy))\n",
        "        peaks.append(idx)\n",
        "        diffs_copy[max(0, idx-min_sep):min(len(diffs_copy), idx+min_sep+1)] = -1\n",
        "    return tuple(sorted(peaks))\n",
        "\n",
        "def _check_stripe_proportions(bgr, y1, y2):\n",
        "    H = bgr.shape[0]\n",
        "    top_h, mid_h, bot_h = (y1+1), (y2-y1), (H-(y2+1))\n",
        "    ideal = H/3.0\n",
        "    tol = max(1, int(STRIPE_PROP_TOL_FRAC * H))\n",
        "    ok = lambda h: abs(h - ideal) <= tol\n",
        "    return \"pass\" if (ok(top_h) and ok(mid_h) and ok(bot_h)) else \"fail\"\n",
        "\n",
        "def _stripe_color_checks(bgr, y1, y2):\n",
        "    rgb = cv2.cvtColor(bgr, cv2.COLOR_BGR2RGB).astype(np.float32)\n",
        "    top_med = np.median(rgb[:y1+1].reshape(-1,3), axis=0)\n",
        "    mid_med = np.median(rgb[y1+1:y2+1].reshape(-1,3), axis=0)\n",
        "    bot_med = np.median(rgb[y2+1:].reshape(-1,3), axis=0)\n",
        "    return {\n",
        "        \"saffron\": \"pass\" if _within_channel_tol(top_med, RGB_SAFFRON) else \"fail\",\n",
        "        \"white\": \"pass\" if _within_channel_tol(mid_med, RGB_WHITE) else \"fail\",\n",
        "        \"green\": \"pass\" if _within_channel_tol(bot_med, RGB_GREEN) else \"fail\",\n",
        "    }\n",
        "\n",
        "def _mask_near_color(bgr, target_rgb, tol=CHANNEL_TOL):\n",
        "    rgb = cv2.cvtColor(bgr, cv2.COLOR_BGR2RGB).astype(np.float32)\n",
        "    diff = np.max(np.abs(rgb - target_rgb.reshape(1,1,3)), axis=2)\n",
        "    return (diff <= tol).astype(np.uint8)\n",
        "\n",
        "def _find_chakra_in_white_band(bgr, y1, y2):\n",
        "    white_band = bgr[y1+1:y2+1]\n",
        "    band_top = y1+1\n",
        "    navy_mask = _mask_near_color(white_band, RGB_NAVY, tol=CHANNEL_TOL)\n",
        "    navy_mask = binary_opening(navy_mask.astype(bool), disk(1))\n",
        "    navy_mask = binary_closing(navy_mask, disk(2)).astype(np.uint8)\n",
        "    lbl = label(navy_mask)\n",
        "    props = regionprops(lbl)\n",
        "    if not props: return None\n",
        "    largest = max(props, key=lambda r: r.area)\n",
        "    coords = np.column_stack(np.where(lbl == largest.label))\n",
        "    if len(coords) < 10: return None\n",
        "    (cx, cy), radius = cv2.minEnclosingCircle(np.array([(c[1], c[0]) for c in coords], dtype=np.float32))\n",
        "    return {\"center\": (float(cx), float(cy+band_top)), \"radius\": float(radius)}\n",
        "\n",
        "def _check_chakra_specs(bgr, y1, y2, chakra):\n",
        "    white_h = (y2-y1)\n",
        "    ideal_diam = CHAKRA_DIAM_FRAC * white_h\n",
        "    diam = 2.0 * chakra[\"radius\"]\n",
        "    diam_ok = abs(diam - ideal_diam) <= (CHAKRA_DIAM_TOL * ideal_diam)\n",
        "    cx, cy = chakra[\"center\"]\n",
        "    white_center_y = (y1+1 + y2)/2.0\n",
        "    flag_center_x = bgr.shape[1]/2.0\n",
        "    ctol = CENTER_TOL_FRACTION_OF_WHITE * white_h\n",
        "    offx, offy = cx-flag_center_x, cy-white_center_y\n",
        "    center_ok = (abs(offx) <= ctol) and (abs(offy) <= ctol)\n",
        "    return (\"pass\" if center_ok else \"fail\"), (\"pass\" if diam_ok else \"fail\")\n",
        "\n",
        "def _count_spokes(bgr, chakra):\n",
        "    cx, cy = chakra[\"center\"]\n",
        "    r = chakra[\"radius\"]\n",
        "    H, W = bgr.shape[:2]\n",
        "    x0, x1 = max(0, int(cx - r*1.1)), min(W, int(cx + r*1.1))\n",
        "    y0, y1 = max(0, int(cy - r*1.1)), min(H, int(cy + r*1.1))\n",
        "    navy_mask = _mask_near_color(bgr, RGB_NAVY, tol=CHANNEL_TOL)[y0:y1, x0:x1].astype(np.uint8)*255\n",
        "    edges = cv2.Canny(navy_mask, EDGE_LOW, EDGE_HIGH)\n",
        "    min_len = max(5, int(MIN_LINE_LEN_FRAC * r))\n",
        "    max_gap = max(2, int(MAX_LINE_GAP_FRAC * r))\n",
        "    lines = cv2.HoughLinesP(edges, 1, np.pi/180, threshold=HOUGH_THRESH,\n",
        "                            minLineLength=min_len, maxLineGap=max_gap)\n",
        "    angles = []\n",
        "    if lines is not None:\n",
        "        cx_local, cy_local = cx-x0, cy-y0\n",
        "        for l in lines:\n",
        "            xA, yA, xB, yB = l[0]\n",
        "            dist = _point_line_segment_distance((cx_local, cy_local), (xA, yA), (xB, yB))\n",
        "            if dist <= r*0.07:\n",
        "                ang = (math.degrees(math.atan2(yB-yA, xB-xA)) + 180) % 180\n",
        "                angles.append(ang)\n",
        "    angles.sort()\n",
        "    clustered = []\n",
        "    for a in angles:\n",
        "        if not clustered or abs(a - np.mean(clustered[-1])) > ANGLE_CLUSTER_DEG:\n",
        "            clustered.append([a])\n",
        "        else:\n",
        "            clustered[-1].append(a)\n",
        "    return len(clustered)\n",
        "\n",
        "def _point_line_segment_distance(P, A, B):\n",
        "    (px, py), (ax, ay), (bx, by) = P, A, B\n",
        "    APx, APy, ABx, ABy = px-ax, py-ay, bx-ax, by-ay\n",
        "    ab2 = ABx*ABx + ABy*ABy\n",
        "    if ab2 == 0: return math.hypot(APx, APy)\n",
        "    t = max(0.0, min(1.0, (APx*ABx + APy*ABy) / ab2))\n",
        "    return math.hypot(px - (ax + ABx*t), py - (ay + ABy*t))\n",
        "\n",
        "def validate_flag(path_or_url):\n",
        "    bgr = _read_image_any(path_or_url)\n",
        "    y1, y2 = _find_stripe_boundaries(bgr)\n",
        "    aspect_status = \"pass\" if abs((bgr.shape[1]/bgr.shape[0]) - TARGET_AR) <= TARGET_AR*AR_TOL else \"fail\"\n",
        "    stripe_colors = _stripe_color_checks(bgr, y1, y2)\n",
        "    stripe_props = _check_stripe_proportions(bgr, y1, y2)\n",
        "    chakra_info = _find_chakra_in_white_band(bgr, y1, y2)\n",
        "    chakra_position, chakra_diameter, spokes = \"fail\", \"fail\", {\"status\": \"fail\", \"detected\": 0}\n",
        "    if chakra_info:\n",
        "        pos_ok, diam_ok = _check_chakra_specs(bgr, y1, y2, chakra_info)\n",
        "        chakra_position = pos_ok\n",
        "        chakra_diameter = diam_ok\n",
        "        scount = _count_spokes(bgr, chakra_info)\n",
        "        spokes = {\"status\": \"pass\" if scount == 24 else \"fail\", \"detected\": scount}\n",
        "    return {\n",
        "        \"aspect_ratio\": aspect_status,\n",
        "        \"colors\": stripe_colors,\n",
        "        \"stripe_proportion\": stripe_props,\n",
        "        \"chakra_position\": chakra_position,\n",
        "        \"chakra_diameter\": chakra_diameter,\n",
        "        \"chakra_spokes\": spokes\n",
        "    }\n",
        "\n",
        "# 3) ---- GENERATE A WRONG FLAG ----\n",
        "width, height = 300, 200\n",
        "flag = Image.new(\"RGB\", (width, height), (255, 255, 255))\n",
        "draw = ImageDraw.Draw(flag)\n",
        "draw.rectangle([0, 0, width, height//3], fill=(255, 0, 0))  # wrong red\n",
        "draw.rectangle([0, height//3, width, int(height * 0.7)], fill=(255, 255, 255)) # misaligned white\n",
        "draw.rectangle([0, int(height * 0.7), width, height], fill=(0, 0, 255)) # wrong blue\n",
        "flag.save(\"wrong_flag.png\")\n",
        "\n",
        "# 4) ---- TEST VALIDATOR ----\n",
        "report = validate_flag(\"wrong_flag.png\")\n",
        "print(json.dumps(report, indent=2))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sg4wG8atdicP",
        "outputId": "6d6429a8-9072-4702-a7bc-db80c5674710"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/45.8 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m\u001b[90m━━━━\u001b[0m \u001b[32m41.0/45.8 kB\u001b[0m \u001b[31m1.1 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m45.8/45.8 kB\u001b[0m \u001b[31m838.0 kB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/75.6 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m\u001b[90m━━\u001b[0m \u001b[32m71.7/75.6 kB\u001b[0m \u001b[31m2.0 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m75.6/75.6 kB\u001b[0m \u001b[31m1.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h{\n",
            "  \"aspect_ratio\": \"pass\",\n",
            "  \"colors\": {\n",
            "    \"saffron\": \"fail\",\n",
            "    \"white\": \"pass\",\n",
            "    \"green\": \"fail\"\n",
            "  },\n",
            "  \"stripe_proportion\": \"fail\",\n",
            "  \"chakra_position\": \"fail\",\n",
            "  \"chakra_diameter\": \"fail\",\n",
            "  \"chakra_spokes\": {\n",
            "    \"status\": \"fail\",\n",
            "    \"detected\": 0\n",
            "  }\n",
            "}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# New Section"
      ],
      "metadata": {
        "id": "ONmRBGL2WMkc"
      }
    }
  ]
}